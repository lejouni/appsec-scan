name: "Application Security Analsysis tools"
description: "This action will use other security scanning tools to do different type of security scannings."
author: Jouni Lehto
branding:
  icon: code
  color: blue
inputs:
  #------------Common inputs------------------------#
  log_level:
    description: Logging level. Default is INFO.
    default: INFO
    required: false
  cache: 
    description: Tools can be cached by setting this to true. Default is true.
    required: false
    default: "true"
  build_command:
    description: Application build command. Ex. mvn clean install
    required: false
  github_token:
    description: "Pass the GitHub token to the script in order to create PRs"
    required: false
  #------------Polaris related inputs------------------------#
  polaris_project:
    description: Project name, if not given then default=github.repository
    required: false
    default: ${{github.repository}}
  polaris_branch:
    description: Project branch name, if not given then default=github.ref_name
    required: false
    default: ${{github.ref_name}}
  polaris_url:
    description: URL for Polaris where the thin client can be downloaded
    required: true
  polaris_token:
    description: Polaris Access Token
    required: true
  polaris_config_overrides:
    description: "With this you can overriding the configuration file. More info: https://sig-docs.synopsys.com/polaris/topics/c_cli-config-overrides.html"
    required: false
    default: --co analyze.coverity.cov-analyze='["--enable", "HARDCODED_CREDENTIALS", "--security", "--webapp-security", "--android-security"]'
  polaris_analysis_mode:
    description: Analysis mode will tell the action that is local or central analysis requested, Options are local and central (Default).
    required: false
    default: central
  polaris_config_file:
    description: "By giving this input, you specify which polaris.yaml file to use. If this is given, then only configurations given inside of the config file, \
                  will be used. If not given then will set polaris server url with flag -s"
    required: false
  polaris_sarif:
    description: By setting this true, you will get results output as a sarif format file. Default is false.
    required: false
    default: "false"
  polaris_sarif_file:
    description: "If polaris_sarif: true, then this is used, to specify the output file with full path. Default: github.workspace/polaris-scan-results.sarif.json"
    required: false
    default: ${{github.workspace}}/polaris-scan-results.sarif.json
  polaris_install_folder:
    description: To which folder the tools are extracted. Default is /tmp/cache/polaris
    required: false
    default: /tmp/cache/polaris
  polaris_platform:
    description: "What platform of Polaris thin client is needed, example: linux64 (Default). Fow Windows win64 and for MacOS macosx"
    default: "linux64"
    required: false
  polaris_version:
    description: "What version of Polaris thin client is needed, example: 2022.9.0 (Default)"
    default: 2022.9.0
    required: false
  #------------Black Duck related inputs------------------------#
  blackduck_url:
    description: URL for Black Duck where the thin client can be downloaded
    required: true
  blackduck_token:
    description: Black Duck Access Token
    required: true
  blackduck_project:
    description: Project name in Black Duck, if not given then default=github.repository
    required: false
    default: ${{github.repository}}
  blackduck_version:
    description: "Project version name in Black Duck. Defaul is github.ref_name"
    required: false
    default: ${{github.ref_name}}
  blackduck_detect_opts:
    description: "Additional detect options. Comma separated list."
    required: false
    default: detect.tools="ALL"
  blackduck_policy_categories:
    description: "Which policy category vulnerabilites are returned. SECURITY and LICENSE are default."
    required: false
    default: SECURITY,LICENSE #Options are [COMPONENT,SECURITY,LICENSE,UNCATEGORIZED,OPERATIONAL]
  blackduck_sarif:
    description: By setting this true, you will get results output as a sarif format file. Default is false.
    required: false
    default: "false"
  blackduck_log_level:
    description: Logging level. Default is 0 = INFO and 9 = DEBUG.
    default: "0" # 0 = INFO and 9 = DEBUG
    required: false
  blackduck_full_scan:
    description: Setting this to true, black duck full scan is executed, otherwise if blackduck is true, then RAPID -scan is done.
    default: "false"
    required: false
  #------------CNC related inputs------------------------#
  cnc_url:
    description: URL for CNC.
    required: true
  cnc_username:
    description: Coverity Connect username
    required: true
  cnc_passphare:
    description: Coverity Connect password
    required: true
  cnc_project:
    description: Project name, if not given then default=github.repository
    required: false
    default: ${{github.repository}}
  cnc_stream:
    description: Project stream name, if not given then default=github.ref_name
    required: false
    default: ${{github.ref_name}}
  cnc_repository_name:
    description: Project repository name
    required: false
  cnc_branche_name:
    description: Project branch name
    required: false
  cnc_sarif:
    description: Project branch name
    required: false
    default: "false"
  cnc_sarif_file:
    description: "If cnc_sarif: true, then this is used, to specify the output file with full path. Default: github.workspace/cnc-scan-results.sarif.json"
    required: false
    default: ${{github.workspace}}/cnc-scan-results.sarif.json
  #------------Which tools are activated------------------------#
  polaris:
    description: "If this is true, then Polaris analysis is done. Default is false."
    required: false
    default: "false"
  blackduck:
    description: "If this is true, then Black Duck analysis is done. Default is false."
    required: false
    default: "false"
  cnc:
    description: "If this is true, then Cloud Native Coverity (CNC) analysis is done. Default is false."
    required: false
    default: "false"

runs:
  using: composite
  steps:
    #---------Coverity on Polaris------------------------#
    - if: ${{inputs.polaris == 'true'}}
      name: Coverity Commit phase
      uses: synopsys-sig-community/setup-polaris-analysis@main
      with:
        polaris_url: ${{inputs.polaris_url}}
        polaris_token: ${{inputs.polaris_token}}
        polaris_install_folder: ${{inputs.polaris_install_folder}}
        polaris_platform: ${{inputs.polaris_platform}}
        polaris_version: ${{inputs.polaris_version}}
        cache: ${{inputs.polaris_cache}}
    - if: ${{inputs.polaris == 'true'}}
      uses: synopsys-sig-community/polaris-analysis@main
      with:
        project: ${{inputs.polaris_project}}
        branch: ${{inputs.polaris_branch}}
        log_level: ${{inputs.log_level}}
        polaris_config_overrides: ${{inputs.polaris_config_overrides}}
        polaris_analysis_mode: ${{inputs.polaris_analysis_mode}}
        polaris_config_file: ${{inputs.polaris_config_file}}
        polaris_sarif: ${{inputs.polaris_sarif}}
        polaris_sarif_file: ${{inputs.polaris_sarif_file}}
        build_command: ${{inputs.build_command}}
    - if: ${{inputs.polaris_sarif == 'true' && inputs.polaris == 'true'}}
      name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file
        sarif_file: ${{inputs.polaris_sarif_file}}
      continue-on-error: true
    - if: ${{inputs.polaris_sarif == 'true' && inputs.polaris == 'true'}}
      name: Archive scanning results
      uses: actions/upload-artifact@v3
      with:
        name: polaris-scan-results
        path: ${{inputs.polaris_sarif_file}}
      continue-on-error: true

    #------------Black Duck incremental------------------------#
    - if: ${{inputs.blackduck == 'true' && inputs.blackduck_full_scan == 'false'}}
      name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9 #install the python needed
    - if: ${{inputs.blackduck == 'true' && inputs.blackduck_full_scan == 'false'}}}
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests blackduck_direct_scan_action
        echo "detectOpts=detect.code.location.name=${{inputs.blackduck_project}}-${{inputs.blackduck_version}},detect.timeout=7200,detect.detector.search.depth=20,detect.excluded.directories.search.depth=20,detect.excluded.directories=node_modules,detect.blackduck.signature.scanner.exclusion.name.patterns=detect.jar,detect.npm.dependency.types.excluded=DEV,detect.wait.for.results=true,${{inputs.blackduck_detect_opts}}" >> $GITHUB_ENV
      shell: bash
    # Run Black Duck rapid scan
    - if: ${{inputs.blackduck == 'true' && inputs.blackduck_full_scan == 'false'}}
      name: Run Black Duck Rapid Scan
      run: |
        blackduck-direct-scan-action --debug=${{ inputs.blackduck_log_level }} --bd_url ${{ inputs.blackduck_url }} --bd_token ${{ inputs.blackduck_token }} --mode rapid --bd_trustcert true --project=${{ inputs.blackduck_project }} --version=${{ inputs.blackduck_version }} --sarif blackduck-sarif.json --detect_opts	${{ env.detectOpts }}
      shell: bash
      env:
        # Pass the GitHub token to the script in order to create PRs
        GITHUB_TOKEN: ${{ inputs.github_token }}  
    #------------Black Duck full------------------------#
    - if: ${{inputs.blackduck == 'true' && inputs.blackduck_full_scan == 'true'}}}
      name: Black Duck Analysis with synopsys-action
      uses: synopsys-sig/synopsys-action@v1.1.0
      with:
        blackduck_apiToken: ${{ inputs.blackduck_token }}
        blackduck_url: ${{ inputs.blackduck_url }}
        blackduck_scan_full: true
        github_token: ${{ inputs.github_token }}
        blackduck_automation_fixpr: false
        blackduck_scan_failure_severities: "NONE"
      env:
        DETECT_PROJECT_NAME: ${{inputs.blackduck_project}}
        DETECT_PROJECT_VERSION_NAME: ${{inputs.blackduck_version}}
        DETECT_CODE_LOCATION_NAME: ${{inputs.blackduck_project}}-${{inputs.blackduck_version}}
        DETECT_TIMEOUT: "7200"
        DETECT_DETECTOR_SEARCH_DEPTH: "20"
        DETECT_EXCLUDED_DIRECTORIES_SEARCH_DEPTH: "20"
        DETECT_EXCLUDED_DIRECTORIES: node_modules
        DETECT_BLACKDUCK_SIGNATURE_EXCLUSION_NAME_PATTERNS: detect.jar
        DETECT_NPM_DEPENDENCY_TYPES_EXCLUDED: DEV
        DETECT_TOOLS: "ALL"

    - if: ${{inputs.blackduck == 'true' && inputs.blackduck_sarif == 'true' && inputs.blackduck_full_scan == 'true'}}}
      uses: lejouni/blackduck-sarif-formatter@main
      with:
        url: ${{ inputs.blackduck_url }}
        token: ${{ inputs.blackduck_token }}
        outputFile: ${{github.workspace}}/blackduck-sarif.json

    - if: ${{inputs.blackduck == 'true' && inputs.blackduck_sarif == 'true'}}
      name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: blackduck-sarif.json
      continue-on-error: true
    - if: ${{inputs.blackduck == 'true' && inputs.blackduck_sarif == 'true'}}
      name: Archive scanning results
      uses: actions/upload-artifact@v3
      with:
        name: bd-scan-results
        path: blackduck-sarif.json
      continue-on-error: true

    #------------Cloud Native Coverity Analysis------------------------#
    - if: ${{inputs.cnc == 'true'}}
      name: CNC Analysis with synopsys-action
      uses: synopsys-sig/synopsys-action@v1.1.0
      with:
        coverity_url: ${{ inputs.cnc_url }}
        coverity_user: ${{ inputs.cnc_username }}
        coverity_passphrase: ${{ inputs.cnc_passphare }}
        coverity_project_name: ${{ inputs.cnc_project }}
        coverity_stream_name: ${{ inputs.cnc_stream }}
        coverity_repository_name: ${{ inputs.cnc_repository_name }}
        coverity_branch_name: ${{ inputs.cnc_branche_name }}
    - if: ${{inputs.cnc == 'true' && inputs.cnc_sarif == 'true' && github.event_name == 'push'}}}
      uses: lejouni/cnc-sarif-formatter@main
      with:
        url: ${{ inputs.cnc_url }}
        username: ${{ inputs.cnc_username }}
        password: ${{ inputs.cnc_passphare }}
        stream: ${{ inputs.cnc_stream }}
        outputFile: ${{inputs.cnc_sarif_file}}

    - if: ${{inputs.cnc == 'true' && inputs.cnc_sarif == 'true'}}
      name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{inputs.cnc_sarif_file}}
      continue-on-error: true
    - if: ${{inputs.cnc == 'true' && inputs.cnc_sarif == 'true'}}
      name: Archive scanning results
      uses: actions/upload-artifact@v3
      with:
        name: cnc-scan-results
        path: ${{inputs.cnc_sarif_file}}
      continue-on-error: true
    #------------Next tool------------------------#
